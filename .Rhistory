# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
plot(a, W_n, col="green",main="W_n",ylim=c(-500,500))
#points(a, W_n, col="green",ylim=c(-300,100),pch="+")
lines(a, W_n, col="green")
par(mfrow = c(3,1),mex=0.5)
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0.5,1.5),main="pvalues" )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
plot(a, U_n, col="red",main="U_n",ylim=c(-500,500))
#points(a, U_n, col="red", pch="*",ylim=c(-300,100),main="U_n")
lines(a, U_n, col="red")
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
plot(a, W_n, col="green",main="W_n",ylim=c(-500,500))
#points(a, W_n, col="green",ylim=c(-300,100),pch="+")
lines(a, W_n, col="green")
par(mfrow = c(3,1),mex=1)
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0.5,1.5),main="pvalues" )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
plot(a, U_n, col="red",main="U_n",ylim=c(-500,500))
#points(a, U_n, col="red", pch="*",ylim=c(-300,100),main="U_n")
lines(a, U_n, col="red")
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
plot(a, W_n, col="green",main="W_n",ylim=c(-500,500))
#points(a, W_n, col="green",ylim=c(-300,100),pch="+")
lines(a, W_n, col="green")
par(mfrow = c(3,1),mex=2)
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0.5,1.5),main="pvalues" )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
plot(a, U_n, col="red",main="U_n",ylim=c(-500,500))
#points(a, U_n, col="red", pch="*",ylim=c(-300,100),main="U_n")
lines(a, U_n, col="red")
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
plot(a, W_n, col="green",main="W_n",ylim=c(-500,500))
#points(a, W_n, col="green",ylim=c(-300,100),pch="+")
lines(a, W_n, col="green")
par(mfrow = c(3,1),mex=4)
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0.5,1.5),main="pvalues" )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
plot(a, U_n, col="red",main="U_n",ylim=c(-500,500))
#points(a, U_n, col="red", pch="*",ylim=c(-300,100),main="U_n")
lines(a, U_n, col="red")
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
plot(a, W_n, col="green",main="W_n",ylim=c(-500,500))
#points(a, W_n, col="green",ylim=c(-300,100),pch="+")
lines(a, W_n, col="green")
par(mfrow = c(3,1),mex=2.5)
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0.5,1.5),main="pvalues" )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
plot(a, U_n, col="red",main="U_n",ylim=c(-500,500))
#points(a, U_n, col="red", pch="*",ylim=c(-300,100),main="U_n")
lines(a, U_n, col="red")
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
plot(a, W_n, col="green",main="W_n",ylim=c(-500,500))
#points(a, W_n, col="green",ylim=c(-300,100),pch="+")
lines(a, W_n, col="green")
par(mfrow = c(3,1),mar=c(2,2,1,1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0.5,1.5),main="pvalues" )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
plot(a, U_n, col="red",main="U_n",ylim=c(-500,500))
#points(a, U_n, col="red", pch="*",ylim=c(-300,100),main="U_n")
lines(a, U_n, col="red")
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
plot(a, W_n, col="green",main="W_n",ylim=c(-500,500))
#points(a, W_n, col="green",ylim=c(-300,100),pch="+")
lines(a, W_n, col="green")
D <- matrix(0, p, p)
D[9,1] = 1
D[1,2] = 1
D[2,6] = 1
U_n=rep(NA,41)
W_n=rep(NA,41)
pvalues=rep(NA,41)
a=seq(0,2,0.05)
j=1
for (i in a){
temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
U_n[j]=temp$U_n
W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
pvalues=rep(NA,41)
a=seq(0,2,0.05)
j=1
for (i in a){
#temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
#U_n[j]=temp$U_n
#W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(0,1),lty=1 )
par(mfrow=c(1,1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(0,1),lty=1 )
pvalues=rep(NA,41)
a=seq(0,10,0.2)
j=1
for (i in a){
#temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
#U_n[j]=temp$U_n
#W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow=c(1,1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(0,1),lty=1 )
pvalues=rep(NA,41)
a=seq(0,100,1)
j=1
for (i in a){
#temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
#U_n[j]=temp$U_n
#W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow=c(1,1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(0,1),lty=1 )
par(mfrow=c(1,1),mar=c(5.1,4.1,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(0,1),lty=1 )
par(mfrow=c(1,1),mar=c(5.1,4.1,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="*", col="blue", pch="o", ylim=c(0,1),lty=1 )
par(mfrow=c(1,1),mar=c(5.1,4.1,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="l", col="blue", pch="o", ylim=c(0,1),lty=1 )
par(mfrow=c(1,1),mar=c(5.1,4.1,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="s", col="blue", pch="o", ylim=c(0,1),lty=1 )
par(mfrow=c(1,1),mar=c(5.1,4.1,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="s", col="blue", pch="o", ylim=c(0,1),lty=1 ,main="pvalues")
par(mfrow=c(1,1),mar=c(2,4.1,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="s", col="blue", pch="o", ylim=c(0,1),lty=1 ,main="pvalues")
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="s", col="blue", pch="o", ylim=c(0,1),lty=1 ,main="pvalues")
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="p", col="blue", pch="o", ylim=c(0,1),lty=1 ,main="pvalues")
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="l", col="blue", pch="o", ylim=c(0,1),lty=1 ,main="pvalues")
library(MASS)
data=read.csv("data/cell_signaling/normalized_and_scaled/pma_normalized.csv",header=T,sep=",")
X=data.matrix(data, rownames.force = NA)
#data will be our X matrix
p=11
D <- matrix(0, p, p)
D[9,11] = 1
alpha=0.05
MU=0.01
U_n=rep(NA,41)
W_n=rep(NA,41)
pvalues=rep(NA,41)
a=seq(0,2,0.05)
j=1
for (i in a){
temp=log.LRT(X,D, links=T,mu=i, alpha=alpha)
U_n[j]=temp$U_n
W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-20,20),lty=1 )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
points(a, U_n, col="red", pch="*",ylim=c(-20,20))
lines(a, U_n, col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
points(a, W_n, col="green",ylim=c(-20,20),pch="+")
lines(a, W_n, col="green", lty=3)
# Adding a legend inside box at the location (2,40) in graph coordinates.
# Note that the order of plots are maintained in the vectors of attributes.
legend("bottomright",legend=c("pvalues","U_n","W_n"), col=c("blue","red","green"),
pch=c("o","*","+"),lty=c(1,2,3),cex=0.5, ncol=1)
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-20,20),lty=1,main="Statistics" )
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
points(a, U_n, col="red", pch="*",ylim=c(-20,20))
lines(a, U_n, col="red",lty=2)
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
points(a, W_n, col="green",ylim=c(-20,20),pch="+")
lines(a, W_n, col="green", lty=3)
# Adding a legend inside box at the location (2,40) in graph coordinates.
# Note that the order of plots are maintained in the vectors of attributes.
legend("bottomright",legend=c("pvalues","U_n","W_n"), col=c("blue","red","green"),
pch=c("o","*","+"),lty=c(1,2,3),cex=0.5, ncol=1)
D <- matrix(0, p, p)
D[9,1] = 1
D[1,2] = 1
D[2,6] = 1
alpha=0.05
MU=0.1
U_n=rep(NA,41)
W_n=rep(NA,41)
pvalues=rep(NA,41)
a=seq(0,2,0.05)
j=1
for (i in a){
#temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
#U_n[j]=temp$U_n
#W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(0,1),lty=1 )
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0.5,1.5),lty=1,main="pvalues")
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0.1,1.1),lty=1,main="pvalues")
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0,1),lty=1,main="pvalues")
U_n=rep(NA,41)
W_n=rep(NA,41)
pvalues=rep(NA,100)
a=seq(0,100,1)
j=1
for (i in a){
#temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
#U_n[j]=temp$U_n
#W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0,1),lty=1,main="pvalues")
U_n=rep(NA,41)
W_n=rep(NA,41)
pvalues=rep(NA,41)
a=seq(0,2,0.05)
j=1
for (i in a){
#temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
#U_n[j]=temp$U_n
#W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0,1),lty=1,main="pvalues")
U_n=rep(NA,41)
W_n=rep(NA,41)
pvalues=rep(NA,41)
a=seq(0,4,0.1)
j=1
for (i in a){
#temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
#U_n[j]=temp$U_n
#W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0,1),lty=1,main="pvalues")
U_n=rep(NA,41)
W_n=rep(NA,41)
pvalues=rep(NA,51)
a=seq(0,5,0.1)
j=1
for (i in a){
#temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
#U_n[j]=temp$U_n
#W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0,1),lty=1,main="pvalues")
U_n=rep(NA,41)
W_n=rep(NA,41)
pvalues=rep(NA,101)
a=seq(0,10,0.1)
j=1
for (i in a){
#temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
#U_n[j]=temp$U_n
#W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0,1),lty=1,main="pvalues")
U_n=rep(NA,41)
W_n=rep(NA,41)
pvalues=rep(NA,51)
a=seq(0,5,0.1)
j=1
for (i in a){
#temp=log.LRT(X,D, links=F,mu=i, alpha=alpha)
#U_n[j]=temp$U_n
#W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow=c(1,1),mar=c(5,2,4.1,2.1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(a, pvalues, type="o", col="blue", pch="o", ylim=c(-0,1),lty=1,main="pvalues")
unlink('knitprova_cache', recursive = TRUE)
library(clrdag)
compute.middle = function(X,A,j, p){
# Finding the indexes K = {k s.t. k is in [1,p]\j}
K = which((1:p)!=j)
# in k we have the indexes of the row without j
inners = apply(X[, K] * A[j, K], 1, sum) # n length vector containing the inner sums for each i-th sample
middle = sum((X[, j] - inners)^2)  # as a matter of fact in the middle we are working on the j-th column
return(middle)
}
sigma.estimator = function(X, A){
n = dim(X)[1]
p = dim(X)[2]
return(sum(sapply(1:p, function(j)compute.middle(X,A,j, p)))/(n*p))
}
log_likelihood = function(X, A, sigma.square){
n = dim(X)[1]
p = dim(X)[2]
return(-sum(sapply(1:p, function(j) (compute.middle(X,A,j,p)/(2*sigma.square)+(n/2*log(sigma.square))))))
}
inner_LRT_function.paths = function(X, X.tr, X.te, D, mu, alpha ){
# Computing all the A.h0 over the sparsity parameters 'k'
A.mles = lapply(1:sum(D), function(mu)MLEdag(X, D=D, tau=alpha, mu=mu, rho=1.2, trace_obj = F))
A.h0s  = lapply(A.mles, function(a)a$A.H0)
A.h1s  = lapply(A.mles, function(a)a$A.H1)
# For each A.h0 compute the associated sigma
sigmas.0 = t(sapply(A.h0s, function(a)sigma.estimator(X.tr, a)))
sigmas.1 = t(sapply(A.h1s, function(a)sigma.estimator(X.te, a)))
# Computing the likelihoods of each pair (A.h0, sigma.h0)
likelihoods.0 = t(sapply(1:length(sigmas.0), function(idx)log_likelihood(X.tr, A.h0s[[idx]], sigmas.0[idx])))
likelihoods.1 = t(sapply(1:length(sigmas.1), function(idx)log_likelihood(X.tr, A.h1s[[idx]], sigmas.1[idx])))
# Finding the idx that give us the maximum likelihood
mle_idx.0 = which(likelihoods.0==max(likelihoods.0))[1] # maximum likelihood over h0
mle_idx.1 = which(likelihoods.1==max(likelihoods.1))[1] # maximum likelihood over h0
return (likelihoods.1[mle_idx.1]-likelihoods.0[mle_idx.0])
#return(list(U.n=exp(log_likelihood(X.tr, A, sigma.unconstrained)-likelihoods[mle_idx]), A.h0=A.h0s[[mle_idx]]))
}
inner_LRT_function.links = function(X, X.tr, X.te, D, mu, alpha){
tmp = MLEdag(X = X, D = D, tau = alpha, mu = mu,
rho = 1.2, trace_obj = FALSE)
A.h0 = tmp$A.H0
A = tmp$A.H1
sigma.h0 = sigma.estimator(X.tr, A.h0)
sigma.unconstrained = sigma.estimator(X.te, A)
return(log_likelihood(X.tr, A, sigma.unconstrained)-log_likelihood(X.tr, A.h0, sigma.h0))
}
log.LRT = function(X,D, links=T, mu,alpha){
n=dim(X)[1]
X.tr = X[1:(n%/%2),]
X.te = X[(n%/%2+1):n,]
if(links){
U_n = inner_LRT_function.links(X, X.tr, X.te, D, mu, alpha)
U_n.swap = inner_LRT_function.links(X, X.te, X.tr, D, mu, alpha)
}
else{
U_n = inner_LRT_function.paths(X, X.tr, X.te, D, mu, alpha)
U_n.swap = inner_LRT_function.paths(X, X.te, X.tr, D,mu, alpha)
}
return(list(links = links, U_n = U_n, W_n = (log((exp(U_n)+exp(U_n.swap))/2))))
}
data=read.csv("data/cell_signaling/normalized_and_scaled/concatenated_normalized.csv",header=T,sep=",")
X=data.matrix(data, rownames.force = NA)
#data will be our X matrixSu
p=11
#transformation
D <- matrix(0, p, p)
D[9,11] = 1
alpha=0.05
MU=0.2
temp=log.LRT(X,D, links=T,mu=MU,alpha=alpha)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#dovremmo rigettare
#male
out=MLEdag(X,D=D,tau=alpha, mu=MU, rho=1.2, trace_obj = F)
out$pval
U_n=rep(NA,51)
W_n=rep(NA,51)
pvalues=rep(NA,51)
k=seq(0,20,0.4)
j=1
for (i in k){
temp=log.LRT(X,D, links=T,mu=i, alpha=alpha)
U_n[j]=temp$U_n
W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow = c(3,1),mar=c(3,3,1,1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(k, pvalues, type="o", col="blue", pch="o", ylim=c(-0.5,1.5),main="pvalues", xlab="k")
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
plot(k, U_n, col="red",main="U_n",ylim=c(-500,500))
#points(a, U_n, col="red", pch="*",ylim=c(-300,100),main="U_n")
lines(k, U_n, col="red")
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
plot(k, W_n, col="green",main="W_n",ylim=c(-500,500))
#points(a, W_n, col="green",ylim=c(-300,100),pch="+")
lines(k, W_n, col="green")
U_n=rep(NA,61)
W_n=rep(NA,61)
pvalues=rep(NA,61)
k=seq(0,12,0.2)
j=1
for (i in k){
temp=log.LRT(X,D, links=T,mu=i, alpha=alpha)
U_n[j]=temp$U_n
W_n[j]=temp$W_n
out=MLEdag(X,D=D,tau=alpha, mu=i, rho=1.2, trace_obj = F)
pvalues[j]=out$pval
j=j+1
}
par(mfrow = c(3,1),mar=c(3,3,1,1))
# plot the first curve by calling plot() function
# First curve is plotted
plot(k, pvalues, type="o", col="blue", pch="o", ylim=c(-0.5,1.5),main="pvalues", xlab="k")
# Add second curve to the same plot by calling points() and lines()
# Use symbol '*' for points.
plot(k, U_n, col="red",main="U_n",ylim=c(-500,500))
#points(a, U_n, col="red", pch="*",ylim=c(-300,100),main="U_n")
lines(k, U_n, col="red")
# Add Third curve to the same plot by calling points() and lines()
# Use symbol '+' for points.
plot(k, W_n, col="green",main="W_n",ylim=c(-500,500))
#points(a, W_n, col="green",ylim=c(-300,100),pch="+")
lines(k, W_n, col="green")
