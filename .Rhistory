return(-sum(sapply(1:p, function(j) (compute.middle(X,A,j,p)/(2*sigma.square)+(n/2*log(sigma.square))))))
}
inner_LRT_function.paths = function(X, X.tr, X.te, D){
# Computing all the A.h0 over the sparsity parameters 'k'
A.mles = lapply(1:sum(D), function(mu)MLEdag(X, D=D, tau=0.35, mu=mu, rho=1.2, trace_obj = F))
A.h0s  = lapply(A.mles, function(a)a$A.H0)
A.h1s  = lapply(A.mles, function(a)a$A.H1)
# For each A.h0 compute the associated sigma
sigmas.0 = t(sapply(A.h0s, function(a)sigma.estimator(X.tr, a)))
sigmas.1 = t(sapply(A.h1s, function(a)sigma.estimator(X.te, a)))
# Computing the likelihoods of each pair (A.h0, sigma.h0)
likelihoods.0 = t(sapply(1:length(sigmas.0), function(idx)log_likelihood(X.tr, A.h0s[[idx]], sigmas.0[idx])))
likelihoods.1 = t(sapply(1:length(sigmas.1), function(idx)log_likelihood(X.tr, A.h1s[[idx]], sigmas.1[idx])))
# Finding the idx that give us the maximum likelihood
mle_idx.0 = which(likelihoods.0==max(likelihoods.0))[1] # maximum likelihood over h0
mle_idx.1 = which(likelihoods.1==max(likelihoods.1))[1] # maximum likelihood over h0
return (likelihoods.1[mle_idx.1]-likelihoods.0[mle_idx.0])
#return(list(U.n=exp(log_likelihood(X.tr, A, sigma.unconstrained)-likelihoods[mle_idx]), A.h0=A.h0s[[mle_idx]]))
}
inner_LRT_function.links = function(X, X.tr, X.te, D){
tmp = MLEdag(X = X, D = D, tau = 0.35, mu = 1,
rho = 1.2, trace_obj = FALSE)
A.h0 = tmp$A.H0
A = tmp$A.H1
sigma.h0 = sigma.estimator(X.tr, A.h0)
sigma.unconstrained = sigma.estimator(X.te, A)
return(log_likelihood(X.tr, A, sigma.unconstrained)-log_likelihood(X.tr, A.h0, sigma.h0))
}
log.LRT = function(X,D, links=T){
n=dim(X)[1]
X.tr = X[1:(n%/%2),]
X.te = X[(n%/%2+1):n,]
if(links){
U_n = inner_LRT_function.links(X, X.tr, X.te, D)
U_n.swap = inner_LRT_function.links(X, X.te, X.tr, D)
}
else{
U_n = inner_LRT_function.paths(X, X.tr, X.te, D)
U_n.swap = inner_LRT_function.paths(X, X.te, X.tr, D)
}
return(list(links = links, U_n = U_n, W_n = (log((exp(U_n)+exp(U_n.swap))/2))))
}
data=read.csv("data/cell_signaling/pma.csv",header=T,sep=",")
head(data,n=5)
X=data.matrix(data, rownames.force = NA)
hist(X[,9],breaks=100)
hist(X[,9])
hist(X[,9],breaks=50)
hist(scale(X[,9]),breaks=50)
boxcox(X[,1])
MASS::boxcox(X[,1])
bixcox(X)
boxcox(X)
library(MASS)
boxcox(X)
boxcox(X[,1])
boxcox(lm(X[,9]~X[,1]))
X.new=boxcox(X[,9],lambda=0.5)
box.cox(X[,1])
bc(X[,1])
boxcoxTransform(X[,1])
boxcox(X[,9]~1,lambda=seq(-2,2,0.001))
optimal_lambda=out$lambda
out=boxcox(X[,9]~1,lambda=seq(-2,2,0.001))
optimal_lambda=out$lambda
optimal_lambda
optimal_lambda=out$x[which.max(out$y)]
optimal_lambda
X=data.matrix(data, rownames.force = NA)
hist(X[,9],breaks=50)
hist(scale(X[,9]),breaks=50)
hist(X[,1],breaks=50)
hist(X[,2],breaks=50)
sizeof(X)
dim(X)
par(mfrow=c(4,3))
for (variable in 1:dim(X)[2){
hist(X[,variable], main="variable"variable , breaks = 30)
}
for (variable in 1:dim(X)[2){
hist(X[,variable], main="variable" , breaks = 30)
}
for (variable in 1:dim(X)[2]){
hist(X[,variable], main="variable" , breaks = 30)
}
for (variable in 1:dim(X)[2]){
hist(X[,variable], main="variable" , breaks = 15)
}
for (variable in 1:dim(X)[2]){
hist(X[,variable], main="variable" , breaks = 15)
}
for (variable in 1:11){
hist(X[,variable], main="variable" , breaks = 15)
}
for (variable in 1:2){
hist(X[,variable], main="variable" , breaks = 15)
}
par(mfrow=c(2,1))
for (variable in 1:2){
hist(X[,variable], main="variable" , breaks = 15)
}
for (variable in 1:2){
hist(X[,variable] , breaks = 15)
}
par(mfrow=c(1,2))
for (variable in 1:2){
hist(X[,variable],main="histogram" , breaks = 15)
}
par(mfrow=c(3,4))
for (variable in 1:11){
hist(X[,variable],main="histogram" , breaks = 15)
}
for (variable in 1:11){
hist(X[,variable],main="histogram" , breaks = 15)
hist(scale(X[,variable]),main="histogram" , breaks = 15,add=TRUE)
}
for (variable in 1:11){
hist(X[,variable],main="histogram" , breaks = 15,add=TRUE)
hist(scale(X[,variable]),main="histogram" , breaks = 15,add=TRUE)
}
for (variable in 1:11){
#hist(X[,variable],main="histogram" , breaks = 15,add=TRUE)
hist(scale(X[,variable]),main="histogram" , breaks = 15,add=TRUE)
}
for (variable in 1:11){
hist(X[,variable],main="histogram" , breaks = 15,add=TRUE)
hist(scale(X[,variable]),main="histogram" , breaks = 15,add=TRUE)
}
for (variable in 1:11){
#hist(X[,variable],main="histogram" , breaks = 15,add=TRUE)
hist(scale(X[,variable]),main="histogram" , breaks = 15,add=TRUE)
}
for (variable in 1:11){
#hist(X[,variable],main="histogram" , breaks = 15,add=TRUE)
hist(scale(X[,variable]),main="histogram" , breaks = 25,add=TRUE)
}
par(mfrow=c(2,3))
for (variable in 1:6){
#hist(X[,variable],main="histogram" , breaks = 15,add=TRUE)
hist(scale(X[,variable]),main="histogram" , breaks = 25,add=TRUE)
}
par(mfrow=c(2,3))
for (variable in 1:6){
#hist(X[,variable],main="histogram" , breaks = 15,add=TRUE)
hist(scale(X[,variable]),main="histogram" , breaks = 25,add=TRUE)
}
hist(X[,1],breaks=50)
par(mfrow=c(1,1))
hist(X[,1],breaks=50)
hist(X[,2],breaks=50)
hist(X[,3],breaks=50)
hist(X[,4],breaks=50)
hist(X[,5],breaks=50)
hist(X[,6],breaks=50)
hist(X[,7],breaks=50)
hist(X[,8],breaks=50)
hist(scale(X[,1])),breaks=50)
hist(scale(X[,1]),breaks=50)
hist(scale(X[,2]),breaks=50)
hist(scale(X[,3]),breaks=50)
hist(scale(X[,4]),breaks=50)
hist(scale(X[,5]),breaks=50)
hist(scale(X[,6]),breaks=50)
hist(scale(X[,7]),breaks=50)
hist(scale(X[,8]),breaks=50)
hist(scale(X[,9]),breaks=50)
hist(scale(X[,10]),breaks=50)
hist(scale(X[,11]),breaks=50)
X=sapply(X,scale)
X=data.matrix(data, rownames.force = NA)
for ( i in 1:11){
X[,i]=scale(X[,i])
}
#FIRST CONNECTION: PIP2->PKC (columns 4  and column 9)
### H0: F = { (4,9) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,4] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
D <- matrix(0, p, p)
D[4,9] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
## OKKKK, we accept the null hypothesis
#FIRST CONNECTION: PIP2->PKC (columns 4  and column 9)
### H0: F = { (9,8) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,8] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#SECOND CONNECTION: PKC->Jnk (columns 4  and column 9)
### H0: F = { (9,11) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,11] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#Third CONNECTION: PKC->PIP3 (columns 4  and column 9)
### H0: F = { (9,5) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,5] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
### H0: F = { (9,11) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,11] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#ok
#FIRST CONNECTION: PKC->PKA (columns 4  and column 9)
### H0: F = { (9,8) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,8] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#ok
#SECOND CONNECTION: PKC->Jnk (columns 4  and column 9)
### H0: F = { (9,11) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,11] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#male
for ( i in 1:11){
X[,i]=( (X[,i]-mean(X[,i]))/sd(X[,i]) )
}
X=data.matrix(data, rownames.force = NA)
for ( i in 1:11){
X[,i]=( (X[,i]-mean(X[,i]))/sd(X[,i]) )
}
hist(X[,5],breaks=50)#bad
hist(X[,5],breaks=50)
X=data.matrix(data, rownames.force = NA)
for ( i in 1:11){
X[,i]=( (X[,i]-mean(X[,i]))/var(X[,i]) )
}
hist(X[,5],breaks=50)#bad
X=data.matrix(data, rownames.force = NA)
for ( i in 1:11){
X[,i]=( (X[,i]-mean(X[,i]))/sd(X[,i]) )
}
hist(X[,5],breaks=50)#bad
### H0: F = { (9,8) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,8] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#male
#SECOND CONNECTION: PKC->Jnk (columns 4  and column 9)
### H0: F = { (9,11) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,11] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#male
#Third CONNECTION: PKC->PIP3 (columns 4  and column 9)
### H0: F = { (9,5) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,5] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#ok
#SECOND CONNECTION: PKC->Jnk (columns 4  and column 9)
### H0: F = { (9,11) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,11] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#dovremmo rigettare
#FIRST CONNECTION: PKC->PKA (columns 4  and column 9)
### H0: F = { (9,8) }, and A[F] = 0
D <- matrix(0, p, p)
D[9,8] = 1
alpha=0.05
temp=log.LRT(X,D, links=T)
U_n=temp$U_n
W_n=temp$W_n
if(U_n>log(1/alpha)) cat(" We can reject the null hypothesis") else cat(" We can not reject the null hypothesis")
#dovremmo rigettare
#male
MLEdag(X,D=D,tau=0.35, mu=mu, rho=1.2, trace_obj = F)
out=MLEdag(X,D=D,tau=0.35, mu=1, rho=1.2, trace_obj = F)
out$pval
D <- matrix(0, p, p)
D[9,11] = 1
alpha=0.05
out=MLEdag(X,D=D,tau=0.35, mu=1, rho=1.2, trace_obj = F)
out$pval
D <- matrix(0, p, p)
D[9,5] = 1
alpha=0.05
out=MLEdag(X,D=D,tau=0.35, mu=1, rho=1.2, trace_obj = F)
out$pval
D <- matrix(0, p, p)
D[9,1] = 1
D[1,2] = 1
D[2,6] = 1
alpha=0.05
temp=log.LRT(X,D, links=F)
U_n=temp$U_n
W_n=temp$W_n
cat("U_n:", U_n, "   W_n:", W_n)
out=MLEdag(X,D=D,tau=0.35, mu=1, rho=1.2, trace_obj = F)
out$pval
Shapiro.test(X[,1])
shapiro.test(X[,1])
shapiro.test(X[,2])
shapiro.test(X[,3])# reject: they are NOT normally distributed
shapiro.test(X[,4])# reject: they are NOT normally distributed
shapiro.test(X[,5])# reject: they are NOT normally distributed
shapiro.test(X[,6])# reject: they are NOT normally distributed
data=read.csv("data/cell_signaling/pma.csv",header=T,sep=",")
head(data,n=5)
X=data.matrix(data, rownames.force = NA)
for ( i in 1:11){
X[,i]=( (X[,i]-mean(X[,i]))/sd(X[,i]) )
}
shapiro.test(X[,1])# reject: they are NOT normally distributed
shapiro.test(X[,2])# reject: they are NOT normally distributed
shapiro.test(X[,3])# reject: they are NOT normally distributed
shapiro.test(X[,4])# reject: they are NOT normally distributed
shapiro.test(X[,5])# reject: they are NOT normally distributed
shapiro.test(X[,6])# reject: they are NOT normally distributed
shapiro.test(X[,7])# reject: they are NOT normally distributed
shapiro.test(X[,8])# reject: they are NOT normally distributed
shapiro.test(X[,9])# reject: they are NOT normally distributed
shapiro.test(X[,10])# reject: they are NOT normally distributed
shapiro.test(X[,11])# reject: they are NOT normally distributed
data=read.csv("data/cell_signaling/pma.csv",header=T,sep=",")
head(data,n=5)
X=data.matrix(data, rownames.force = NA)
shapiro.test(scale(X[,1]))
normalize.vector()
plt.figure(figsize = (8, 8))
data = np.random.beta(1, 3, 5000)
sns.distplot(data)
plt.show()
boxcox(X[,2])
boxcox(X[,2],lambda=seq(-2,2,0.01))
bc=boxcox(X[,1],lambda=seq(-2,2))
bc=boxcox(X[,1]~1,lambda=seq(-2,2))
a=c(1,1,1)
a=sapply(a, function(x) x^2)
a
a=sapply(a, function(x) x*2)
a
a=sapply(a, function(x) (x*2)^2)
a
a=matrix(1,nrow=2,ncol=2,)
a
a=sapply(a, function(x) (x*2)^2)
a
a=sapply(a, function(x) (x*2)^2)
a=matrix(1,nrow=2,ncol=2,)
a=apply(a,2, function(x) (x*2)^2)
a
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2))
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda=0){
column=sapply(column,function(x) log(x))
else{
column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
}
}
#PROVE BOXCOX
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2))
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda=0){
column=sapply(column,function(x) log(x))
}
else{
column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
}
}
#PROVE BOXCOX
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2))
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda=0){
column=sapply(column,function(x) log(x))
}
else{
column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
}
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2))
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda=0){
column=sapply(column,function(x) log(x))
}
else{
column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
}
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2))
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda=0) column=sapply(column,function(x) log(x))
else column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2))
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda=0) column=sapply(column,function(x) log(x))
else column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2))
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda=0) {
column=sapply(column,function(x) log(x))
}
else {
column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
}
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2))
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda==0) {
column=sapply(column,function(x) log(x))
}
else {
column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
}
ris=transform(X[,2])
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2));
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda==0) {
column=sapply(column,function(x) log(x))
}
else {
column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
}
ris=transform(X[,3])
shapiro.test(ris)
data=read.csv("data/cell_signaling/pma.csv",header=T,sep=",")
head(data,n=5)
X=data.matrix(data, rownames.force = NA)
data=read.csv("data/cell_signaling/pma.csv",header=T,sep=",")
X=data.matrix(data, rownames.force = NA)
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2));
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda==0) {
column=sapply(column,function(x) log(x))
}
else {
column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
}
ris=transform(X[,3])
shapiro.test(ris)
data=read.csv("data/cell_signaling/pma.csv",header=T,sep=",")
X=data.matrix(data, rownames.force = NA)
transform=function(column){
bc=boxcox(column~1,lambda=seq(-2,2));
best_lambda=bc$x[which(bc$y==max(bc$y))]
if (best_lambda==0) {
column=sapply(column,function(x) log(x))
}
else {
column=sapply(column,function(x) (x^best_lambda-1)/best_lambda)
}
}
ris=transform(X[,3])
hist(ris)
hist(scale(ris))
shapiro.test(scale(ris))
